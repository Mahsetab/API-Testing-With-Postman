{
	"info": {
		"_postman_id": "0ab662f6-266d-434f-88d2-393907057020",
		"name": "Testing_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40292343",
		"_collection_link": "https://red-rocket-674614.postman.co/workspace/Batch_30~4604b074-c120-40ae-9116-5c0aad0f1787/collection/40292343-0ab662f6-266d-434f-88d2-393907057020?action=share&source=collection_link&creator=40292343"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"id\",jsonData.bookingid)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//first name\r",
							"var firstName = pm.variables.replaceIn(\r",
							"    \"{{$randomFirstName}}\")\r",
							"\r",
							"console.log(firstName)    \r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"//last name\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"//total price\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"totalPrice\",totalPrice)\r",
							"\r",
							"\r",
							"//depositpaid\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositPaid\",depositPaid)\r",
							"\r",
							"//Date\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"\r",
							"//checkin\r",
							"var checkin = today.add(1,'d').format(\"YYYY-MM-DD\")\r",
							"// console.log(checkin)\r",
							"pm.environment.set(\"checkin\",checkin)\r",
							"\r",
							"// checkout\r",
							"var checkout = today.add(1,'d').format(\"YYYY-MM-DD\")\r",
							"// console.log(checkout)\r",
							"pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							"//additional need\r",
							"const additionalNeed = [\"Breakfast\",\"Lunch\",\"Dinner\",\"Wifi\"]\r",
							"pm.variables.set(\"additionalNeed\",additionalNeed[Math.floor(Math.random()*additionalNeed.length)])\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : {{totalPrice}},\r\n\t\"depositpaid\" : {{depositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalNeed}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"console.log(status_code)\r",
							"\r",
							"if (status_code == 200){\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.test(\"First name validation \",function(){\r",
							"        pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))})\r",
							"\r",
							"    pm.test(\"Last name validation \",function(){\r",
							"        pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))})\r",
							"\r",
							"    pm.test(\"Total price validation \",function(){\r",
							"        pm.expect(jsonData.totalprice.toString()).to.eql(pm.environment.get(\"totalPrice\"))})\r",
							"\r",
							"    pm.test(\"Deposit paid validation \",function(){\r",
							"        pm.expect(jsonData.depositpaid.toString()).to.eql(pm.environment.get(\"depositPaid\"))})\r",
							"\r",
							"    pm.test(\"Check-in date validation \",function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))})\r",
							"\r",
							"    pm.test(\"Check-out date validation \",function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))})\r",
							"\r",
							"}\r",
							"\r",
							"else if (status_code == 404){\r",
							"    console.log(\"Not found\")\r",
							"}\r",
							"else{\r",
							"    console.log(\"Something went wrong...\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Session Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"access_token\",jsonData.token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//first name\r",
							"var updated_firstName = pm.variables.replaceIn(\r",
							"    \"{{$randomFirstName}}\")\r",
							"\r",
							"// console.log(firstName)    \r",
							"pm.environment.set(\"updated_firstName\",updated_firstName)\r",
							"\r",
							"//last name\r",
							"var updated_lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"updated_lastName\",updated_lastName)\r",
							"\r",
							"//total price\r",
							"var updated_totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"updated_totalPrice\",updated_totalPrice)\r",
							"\r",
							"\r",
							"//depositpaid\r",
							"var updated_depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"updated_depositPaid\",updated_depositPaid)\r",
							"\r",
							"//Date\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"\r",
							"//checkin\r",
							"var updated_checkin = today.add(1,'d').format(\"YYYY-MM-DD\")\r",
							"// console.log(checkin)\r",
							"pm.environment.set(\"updated_checkin\",updated_checkin)\r",
							"\r",
							"// checkout\r",
							"var updated_checkout = today.add(1,'d').format(\"YYYY-MM-DD\")\r",
							"// console.log(checkout)\r",
							"pm.environment.set(\"updated_checkout\",updated_checkout)\r",
							"\r",
							"//additional need\r",
							"const updated_additionalNeed = [\"Breakfast\",\"Lunch\",\"Dinner\",\"Wifi\"]\r",
							"pm.variables.set(\"updated_additionalNeed\",updated_additionalNeed[Math.floor(Math.random()*updated_additionalNeed.length)])\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{updated_firstName}}\",\r\n\t\"lastname\" : \"{{updated_lastName}}\",\r\n\t\"totalprice\" : {{updated_totalPrice}},\r\n\t\"depositpaid\" : {{updated_depositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{updated_checkin}}\",\r\n    \t\"checkout\" : \"{{updated_checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{updated_additionalNeed}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"console.log(status_code)\r",
							"\r",
							"if (status_code == 200){\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.test(\"Updated first name validation \",function(){\r",
							"        pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"updated_firstName\"))})\r",
							"\r",
							"    pm.test(\"Updated last name validation \",function(){\r",
							"        pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"updated_lastName\"))})\r",
							"\r",
							"    pm.test(\"Updated total price validation \",function(){\r",
							"        pm.expect(jsonData.totalprice.toString()).to.eql(pm.environment.get(\"updated_totalPrice\"))})\r",
							"\r",
							"    pm.test(\"Updated deposit paid validation \",function(){\r",
							"        pm.expect(jsonData.depositpaid.toString()).to.eql(pm.environment.get(\"updated_depositPaid\"))})\r",
							"\r",
							"    pm.test(\"Updated check-in date validation \",function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"updated_checkin\"))})\r",
							"\r",
							"    pm.test(\"Updated check-out date validation \",function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"updated_checkout\"))})\r",
							"}\r",
							"else if (status_code == 404){\r",
							"    console.log(\"Not found\")\r",
							"}\r",
							"else{\r",
							"    console.log(\"Something went wrong...\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}